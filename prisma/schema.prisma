generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                        String                     @id @default(cuid())
  admissionType             AdmissionType
  name                      String
  dob                       DateTime
  fatherName                String
  motherName                String
  category                  StudentCategory
  gender                    Gender
  nationality               String
  courseId                  String
  courseStatus              CourseStatus               @default(ONGOING)
  batch                     BatchType
  studentPhoto              String?
  subjectIds                String[]
  applicationNumber         String                     @unique
  enrollmentNumber          String?                    @unique
  phoneNumber               String                     @unique
  email                     String                     @unique
  instituteId               String?
  paymentStatus             PaymentStatus
  paymentAmount             Float
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  correspondenceAddress     CorrespondenceAddress[]
  educationalQualifications EducationalQualification[]
  lastPassedExam            LastPassedExam[]
  payments                  Payment[]
  permanentAddress          PermanentAddress[]
  results                   Result[]
  institute                 Institute?                 @relation(fields: [instituteId], references: [id])
  documents                 StudentDocument[]
}

model EducationalQualification {
  id            String          @id @default(cuid())
  studentId     String
  examination   ExaminationType
  subjects      String
  board         String?
  university    String?
  yearOfPassing String
  division      String?
  grade         String?
  percentage    Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  student       Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model LastPassedExam {
  id              String      @id @default(cuid())
  studentId       String
  subjectType     SubjectType
  subject         String
  practicalMarks  Float
  assignmentMarks Float
  theoryMarks     Float
  obtainedMarks   Float
  maximumMarks    Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  student         Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model PermanentAddress {
  id        String       @id @default(cuid())
  studentId String
  address   String
  city      String
  district  String
  state     IndianState?
  country   Country      @default(INDIA)
  pincode   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model CorrespondenceAddress {
  id        String       @id @default(cuid())
  studentId String
  address   String
  city      String
  district  String
  state     IndianState?
  country   Country      @default(INDIA)
  pincode   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model StudentDocument {
  id           String       @id @default(cuid())
  studentId    String
  documentType DocumentType
  fileName     String
  fileUrl      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Institute {
  id                   String              @id @default(cuid())
  applicationNumber    String?             @unique
  registrationNumber   String?             @unique
  headDob              String
  headName             String
  headFatherName       String
  headAadharNumber     String              @unique
  headPanCardNumber    String              @unique
  headMobileNumber     String
  headEmailId          String
  headProfileImage     String?
  headGender           Gender
  headAddress          String
  headCity             String
  headState            IndianState?
  headUnionTerritory   UnionTerritory?
  headCountry          Country             @default(INDIA)
  headPincode          String
  headBankName         String
  headAccountNumber    String              @unique
  headIfscCode         String
  centerCode           String?
  centerName           String
  centerEmailId        String
  centerWebsiteUrl     String?
  centerPhoneNumber    String
  centerAddress        String
  centerCity           String
  centerState          IndianState?
  centerUnionTerritory UnionTerritory?
  centerCountry        Country             @default(INDIA)
  centerPincode        String
  paymentStatus        PaymentStatus       @default(PENDING)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  documents            InstituteDocument[]
  payments             Payment[]
  students             Student[]
}

model InstituteDocument {
  id           String                @id @default(cuid())
  instituteId  String
  documentType InstituteDocumentType
  fileName     String
  fileUrl      String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  institute    Institute             @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

model Payment {
  id                    String                 @id @default(cuid())
  merchantTransactionId String                 @unique
  phonePeTransactionId  String?                @unique
  merchantId            String
  merchantUserId        String
  amount                Float
  paymentType           PaymentType
  studentId             String?
  instituteId           String?
  eventRegistrationId   String?
  paymentStatus         PaymentStatus          @default(PENDING)
  paymentInstrumentType PaymentInstrumentType?
  utr                   String?
  cardType              String?
  pgTransactionId       String?
  bankTransactionId     String?
  pgAuthorizationCode   String?
  arn                   String?
  bankId                String?
  brn                   String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  eventRegistration     EventRegistration?     @relation(fields: [eventRegistrationId], references: [id], onDelete: Cascade)
  institute             Institute?             @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  student               Student?               @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Enquiry {
  id          String        @id @default(cuid())
  title       String
  description String
  name        String
  phoneNumber String
  email       String
  status      EnquiryStatus @default(NEW)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Notice {
  id           String   @id @default(cuid())
  title        String
  description  String
  forInstitute Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Course {
  id           String        @id @default(cuid())
  name         String
  code         String?
  fees         Float?
  duration     Int?
  durationType DurationType?
  courseType   CourseType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  subjects     Subject[]
}

model Subject {
  id        String      @id @default(cuid())
  name      String
  code      String
  fees      Float?
  type      SubjectType
  courseId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  course    Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model SubjectResultDetail {
  id            String       @id @default(cuid())
  code          String
  name          String
  totalMarks    Float
  obtainedMarks Float
  grade         Grade
  status        ResultStatus
  resultId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  result        Result       @relation(fields: [resultId], references: [id], onDelete: Cascade)
}

model Result {
  id            String                @id @default(cuid())
  studentId     String
  month         Month
  year          Year
  totalMarks    Float
  obtainedMarks Float
  status        ResultStatus
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  student       Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  details       SubjectResultDetail[]
}

model EventRegistration {
  id                      String                       @id @default(cuid())
  firstName               String
  lastName                String
  email                   String                       @unique
  phone                   String                       @unique
  dateOfBirth             DateTime
  gender                  Gender
  address                 String
  city                    String
  state                   String
  pincode                 String
  country                 String                       @default("India")
  qualification           String?
  instituteName           String?
  occupation              String?
  organizationName        String?
  designation             String?
  guardianName            String?
  guardianPhone           String?
  guardianRelation        String?
  emergencyContactName    String
  emergencyContactPhone   String
  emergencyContactRelation String
  howDidYouHear           String?
  specialRequirements     String?
  previousExperience      String?
  registrationNumber      String?                      @unique
  paymentStatus           PaymentStatus                @default(PENDING)
  paymentAmount           Float
  optForFood              Boolean?                     @default(false)
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  documents               EventRegistrationDocument[]
  payments                Payment[]
}

model EventRegistrationDocument {
  id                    String            @id @default(cuid())
  eventRegistrationId   String
  documentType          EventDocumentType
  fileName              String
  fileUrl               String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  eventRegistration     EventRegistration @relation(fields: [eventRegistrationId], references: [id], onDelete: Cascade)
}

enum StudentCategory {
  GENERAL
  SC
  ST
  OBC
  MINORITY
  NRI
  FOREIGN_NATIONAL
  OTHER
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

enum Year {
  Y2020
  Y2021
  Y2022
  Y2023
  Y2024
  Y2025
  Y2026
  Y2027
  Y2028
  Y2029
  Y2030
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ResultStatus {
  PASS
  FAIL
  PENDING
  INCOMPLETE
  WITHHELD
  CANCELLED
}

enum Grade {
  A_PLUS
  A
  B_PLUS
  B
  C_PLUS
  C
  D
  F
}

enum Country {
  INDIA
}

enum IndianState {
  ANDHRA_PRADESH
  ARUNACHAL_PRADESH
  ASSAM
  BIHAR
  CHHATTISGARH
  GOA
  GUJARAT
  HARYANA
  HIMACHAL_PRADESH
  JHARKHAND
  KARNATAKA
  KERALA
  MADHYA_PRADESH
  MAHARASHTRA
  MANIPUR
  MEGHALAYA
  MIZORAM
  NAGALAND
  ODISHA
  PUNJAB
  RAJASTHAN
  SIKKIM
  TAMIL_NADU
  TELANGANA
  TRIPURA
  UTTAR_PRADESH
  UTTARAKHAND
  WEST_BENGAL
}

enum UnionTerritory {
  ANDAMAN_NICOBAR
  CHANDIGARH
  DADRA_NAGAR_HAVELI
  DAMAN_DIU
  DELHI
  JAMMU_KASHMIR
  LADAKH
  LAKSHADWEEP
  PUDUCHERRY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  DECLINED
  PROCESSING
  REFUNDED
  CANCELLED
  TIMED_OUT
  ERROR
}

enum EnquiryStatus {
  NEW
  IN_PROGRESS
  FOLLOW_UP
  CONVERTED
  CLOSED
  REJECTED
}

enum DocumentType {
  PROFILE_PHOTO
  AADHAR_CARD_FRONT
  AADHAR_CARD_BACK
  MARKSHEET_10TH
  MARKSHEET_12TH
  TRANSFER_CERTIFICATE
  BIRTH_CERTIFICATE
  INCOME_CERTIFICATE
  CASTE_CERTIFICATE
  PASSPORT
  OTHER
}

enum InstituteDocumentType {
  HEAD_AADHAR_CARD_FRONT
  HEAD_AADHAR_CARD_BACK
  HEAD_PAN_CARD
  REGISTRATION_CERTIFICATE
  AFFILIATION_DOCUMENT
  TAX_DOCUMENT
  LOGO
  INFRASTRUCTURE_PLAN
  ACADEMIC_CALENDAR
  FACULTY_CREDENTIALS
  ACCREDITATION_CERTIFICATE
  LAND_DOCUMENT
  OTHER
}

enum CourseType {
  ACADEMIC
  DIPLOMA
  CERTIFICATE
  DEGREE
  POST_GRADUATE
  PHD
}

enum SubjectType {
  LANGUAGE
  NON_LANGUAGE
  VOCATIONAL
}

enum ExaminationType {
  X
  XII
  OTHER
}

enum AdmissionType {
  FRESH
  TOC
  PART_ADMISSION
}

enum BatchType {
  BATCH_1_2022_O_22
  BATCH_2_2022_M_23
  BATCH_1_2023_O_23
  BATCH_2_2023_M_24
  BATCH_1_2024_O_24
  BATCH_2_2024_M_25
  BATCH_1_2025_O_25
  BATCH_2_2025_M_26
}

enum PaymentType {
  STUDENT
  INSTITUTE
  EVENT_REGISTRATION
}

enum PaymentInstrumentType {
  UPI
  NETBANKING
  CARD
}

enum DurationType {
  MONTH
  YEAR
}

enum CourseStatus {
  ONGOING
  COMPLETED
}

enum EventDocumentType {
  PROFILE_PICTURE
  PHOTOGRAPH
  AADHAR_CARD
  PAN_CARD
  EDUCATION_CERTIFICATE
  EXPERIENCE_LETTER
  PASSPORT
  OTHER
}
